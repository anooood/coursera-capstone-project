{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "<p style=\"text-align:center\">\n",
    "    <a href=\"https://skills.network/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkML0101ENSkillsNetwork20718538-2022-01-01\" target=\"_blank\">\n",
    "    <img src=\"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/assets/logos/SN_web_lightmode.png\" width=\"200\" alt=\"Skills Network Logo\"  />\n",
    "    </a>\n",
    "</p>\n",
    "\n",
    "<h1 align=\"center\"><font size=\"5\">Classification with Python</font></h1>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "In this notebook we try to practice all the classification algorithms that we have learned in this course.\n",
    "\n",
    "We load a dataset using Pandas library, and apply the following algorithms, and find the best one for this specific dataset by accuracy evaluation methods.\n",
    "\n",
    "Let's first load required libraries:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [],
   "source": [
    "import itertools\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.ticker import NullFormatter\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.ticker as ticker\n",
    "from sklearn import preprocessing\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "### About dataset\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "This dataset is about past loans. The **Loan_train.csv** data set includes details of 346 customers whose loan are already paid off or defaulted. It includes following fields:\n",
    "\n",
    "| Field          | Description                                                                           |\n",
    "| -------------- | ------------------------------------------------------------------------------------- |\n",
    "| Loan_status    | Whether a loan is paid off on in collection                                           |\n",
    "| Principal      | Basic principal loan amount at the                                                    |\n",
    "| Terms          | Origination terms which can be weekly (7 days), biweekly, and monthly payoff schedule |\n",
    "| Effective_date | When the loan got originated and took effects                                         |\n",
    "| Due_date       | Since itâ€™s one-time payoff schedule, each loan has one single due date                |\n",
    "| Age            | Age of applicant                                                                      |\n",
    "| Education      | Education of applicant                                                                |\n",
    "| Gender         | The gender of applicant                                                               |\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "Let's download the dataset\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('loan_train.csv', <http.client.HTTPMessage at 0x108a12c70>)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import urllib.request\n",
    "url = 'https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-ML0101EN-SkillsNetwork/labs/FinalModule_Coursera/data/loan_train.csv'\n",
    "filename = 'loan_train.csv'\n",
    "urllib.request.urlretrieve(url, filename)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "### Load Data From CSV File\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0.1</th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>loan_status</th>\n",
       "      <th>Principal</th>\n",
       "      <th>terms</th>\n",
       "      <th>effective_date</th>\n",
       "      <th>due_date</th>\n",
       "      <th>age</th>\n",
       "      <th>education</th>\n",
       "      <th>Gender</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>9/8/2016</td>\n",
       "      <td>10/7/2016</td>\n",
       "      <td>45</td>\n",
       "      <td>High School or Below</td>\n",
       "      <td>male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>9/8/2016</td>\n",
       "      <td>10/7/2016</td>\n",
       "      <td>33</td>\n",
       "      <td>Bechalor</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>1000</td>\n",
       "      <td>15</td>\n",
       "      <td>9/8/2016</td>\n",
       "      <td>9/22/2016</td>\n",
       "      <td>27</td>\n",
       "      <td>college</td>\n",
       "      <td>male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>9/9/2016</td>\n",
       "      <td>10/8/2016</td>\n",
       "      <td>28</td>\n",
       "      <td>college</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>9/9/2016</td>\n",
       "      <td>10/8/2016</td>\n",
       "      <td>29</td>\n",
       "      <td>college</td>\n",
       "      <td>male</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0.1  Unnamed: 0 loan_status  Principal  terms effective_date  \\\n",
       "0             0           0     PAIDOFF       1000     30       9/8/2016   \n",
       "1             2           2     PAIDOFF       1000     30       9/8/2016   \n",
       "2             3           3     PAIDOFF       1000     15       9/8/2016   \n",
       "3             4           4     PAIDOFF       1000     30       9/9/2016   \n",
       "4             6           6     PAIDOFF       1000     30       9/9/2016   \n",
       "\n",
       "    due_date  age             education  Gender  \n",
       "0  10/7/2016   45  High School or Below    male  \n",
       "1  10/7/2016   33              Bechalor  female  \n",
       "2  9/22/2016   27               college    male  \n",
       "3  10/8/2016   28               college  female  \n",
       "4  10/8/2016   29               college    male  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('loan_train.csv')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(346, 10)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "### Convert to date time object\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0.1</th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>loan_status</th>\n",
       "      <th>Principal</th>\n",
       "      <th>terms</th>\n",
       "      <th>effective_date</th>\n",
       "      <th>due_date</th>\n",
       "      <th>age</th>\n",
       "      <th>education</th>\n",
       "      <th>Gender</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>2016-09-08</td>\n",
       "      <td>2016-10-07</td>\n",
       "      <td>45</td>\n",
       "      <td>High School or Below</td>\n",
       "      <td>male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>2016-09-08</td>\n",
       "      <td>2016-10-07</td>\n",
       "      <td>33</td>\n",
       "      <td>Bechalor</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>1000</td>\n",
       "      <td>15</td>\n",
       "      <td>2016-09-08</td>\n",
       "      <td>2016-09-22</td>\n",
       "      <td>27</td>\n",
       "      <td>college</td>\n",
       "      <td>male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>2016-09-09</td>\n",
       "      <td>2016-10-08</td>\n",
       "      <td>28</td>\n",
       "      <td>college</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>2016-09-09</td>\n",
       "      <td>2016-10-08</td>\n",
       "      <td>29</td>\n",
       "      <td>college</td>\n",
       "      <td>male</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0.1  Unnamed: 0 loan_status  Principal  terms effective_date  \\\n",
       "0             0           0     PAIDOFF       1000     30     2016-09-08   \n",
       "1             2           2     PAIDOFF       1000     30     2016-09-08   \n",
       "2             3           3     PAIDOFF       1000     15     2016-09-08   \n",
       "3             4           4     PAIDOFF       1000     30     2016-09-09   \n",
       "4             6           6     PAIDOFF       1000     30     2016-09-09   \n",
       "\n",
       "    due_date  age             education  Gender  \n",
       "0 2016-10-07   45  High School or Below    male  \n",
       "1 2016-10-07   33              Bechalor  female  \n",
       "2 2016-09-22   27               college    male  \n",
       "3 2016-10-08   28               college  female  \n",
       "4 2016-10-08   29               college    male  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['due_date'] = pd.to_datetime(df['due_date'])\n",
    "df['effective_date'] = pd.to_datetime(df['effective_date'])\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "# Data visualization and pre-processing\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "Letâ€™s see how many of each class is in our data set\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PAIDOFF       260\n",
       "COLLECTION     86\n",
       "Name: loan_status, dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['loan_status'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "260 people have paid off the loan on time while 86 have gone into collection\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's plot some columns to underestand data better:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting package metadata (current_repodata.json): done\n",
      "Solving environment: / \n",
      "The environment is inconsistent, please check the package plan carefully\n",
      "The following packages are causing the inconsistency:\n",
      "\n",
      "  - defaults/noarch::dask-core==2021.10.0=pyhd3eb1b0_0\n",
      "  - defaults/noarch::tifffile==2021.7.2=pyhd3eb1b0_2\n",
      "  - defaults/osx-64::daal4py==2021.3.0=py39h01d92e1_0\n",
      "  - defaults/noarch::jupyterlab_server==2.8.2=pyhd3eb1b0_0\n",
      "  - defaults/osx-64::scikit-learn==0.24.2=py39hb2f4e1b_0\n",
      "  - defaults/noarch::cookiecutter==1.7.2=pyhd3eb1b0_0\n",
      "  - defaults/noarch::imageio==2.9.0=pyhd3eb1b0_0\n",
      "  - defaults/osx-64::numba==0.54.1=py39hae1ba45_0\n",
      "  - defaults/osx-64::jupyter==1.0.0=py39hecd8cb5_7\n",
      "  - defaults/noarch::python-lsp-black==1.0.0=pyhd3eb1b0_0\n",
      "  - defaults/osx-64::bottleneck==1.3.2=py39he3068b8_1\n",
      "  - defaults/osx-64::mkl_random==1.2.2=py39hb2f4e1b_0\n",
      "  - defaults/noarch::conda-repo-cli==1.0.4=pyhd3eb1b0_0\n",
      "  - defaults/osx-64::patsy==0.5.2=py39hecd8cb5_0\n",
      "  - defaults/osx-64::nbconvert==6.1.0=py39hecd8cb5_0\n",
      "  - defaults/osx-64::imagecodecs==2021.8.26=py39ha952a84_0\n",
      "  - defaults/osx-64::bkcharts==0.2=py39hecd8cb5_0\n",
      "  - defaults/noarch::nbclassic==0.2.6=pyhd3eb1b0_0\n",
      "  - defaults/osx-64::distributed==2021.10.0=py39hecd8cb5_0\n",
      "  - defaults/osx-64::notebook==6.4.5=py39hecd8cb5_0\n",
      "  - defaults/noarch::sphinx==4.2.0=pyhd3eb1b0_1\n",
      "  - defaults/osx-64::numpy==1.20.3=py39h4b4dc7a_0\n",
      "  - defaults/noarch::numpydoc==1.1.0=pyhd3eb1b0_1\n",
      "  - defaults/osx-64::astropy==4.3.1=py39hf9932de_0\n",
      "  - defaults/osx-64::pywavelets==1.1.1=py39he3068b8_4\n",
      "  - defaults/osx-64::scikit-learn-intelex==2021.3.0=py39hecd8cb5_0\n",
      "  - defaults/osx-64::pytest==6.2.4=py39hecd8cb5_2\n",
      "  - defaults/noarch::bleach==4.0.0=pyhd3eb1b0_0\n",
      "  - defaults/osx-64::h5py==3.2.1=py39h90fc2a2_0\n",
      "  - defaults/osx-64::anaconda==2021.11=py39_0\n",
      "  - defaults/osx-64::anaconda-client==1.9.0=py39hecd8cb5_0\n",
      "  - defaults/osx-64::_ipyw_jlab_nb_ext_conf==0.1.0=py39hecd8cb5_0\n",
      "  - defaults/osx-64::pytables==3.6.1=py39h648f197_1\n",
      "  - defaults/noarch::nltk==3.6.5=pyhd3eb1b0_0\n",
      "  - defaults/osx-64::scikit-image==0.18.3=py39hae1ba45_0\n",
      "  - defaults/noarch::black==19.10b0=py_0\n",
      "  - conda-forge/osx-64::conda==4.12.0=py39h6e9494a_0\n",
      "  - defaults/osx-64::pyerfa==2.0.0=py39h9ed2024_0\n",
      "  - defaults/noarch::jupyterlab==3.2.1=pyhd3eb1b0_1\n",
      "  - defaults/osx-64::spyder==5.1.5=py39hecd8cb5_1\n",
      "  - defaults/noarch::soupsieve==2.2.1=pyhd3eb1b0_0\n",
      "  - defaults/osx-64::numexpr==2.7.3=py39h5873af2_1\n",
      "  - defaults/noarch::ipywidgets==7.6.5=pyhd3eb1b0_1\n",
      "  - defaults/osx-64::jupyter_server==1.4.1=py39hecd8cb5_0\n",
      "  - defaults/osx-64::mkl_fft==1.3.1=py39h4ab4a9b_0\n",
      "  - defaults/noarch::conda-token==0.3.0=pyhd3eb1b0_0\n",
      "  - defaults/noarch::seaborn==0.11.2=pyhd3eb1b0_0\n",
      "  - defaults/osx-64::bokeh==2.4.1=py39hecd8cb5_0\n",
      "  - defaults/noarch::dask==2021.10.0=pyhd3eb1b0_0\n",
      "  - defaults/osx-64::conda-build==3.21.5=py39hecd8cb5_0\n",
      "  - defaults/osx-64::widgetsnbextension==3.5.1=py39hecd8cb5_0\n",
      "  - defaults/noarch::anaconda-project==0.10.1=pyhd3eb1b0_0\n",
      "  - defaults/osx-64::matplotlib==3.4.3=py39hecd8cb5_0\n",
      "  - defaults/osx-64::anaconda-navigator==2.1.1=py39_0\n",
      "done\n",
      "\n",
      "## Package Plan ##\n",
      "\n",
      "  environment location: /opt/anaconda3\n",
      "\n",
      "  added / updated specs:\n",
      "    - seaborn\n",
      "\n",
      "\n",
      "The following NEW packages will be INSTALLED:\n",
      "\n",
      "  _anaconda_depends  anaconda/osx-64::_anaconda_depends-2021.11-py39_0\n",
      "  beautifulsoup4     anaconda/osx-64::beautifulsoup4-4.11.1-py39hecd8cb5_0\n",
      "  matplotlib-base    anaconda/osx-64::matplotlib-base-3.4.3-py39h0a11d32_0\n",
      "  numpy-base         anaconda/osx-64::numpy-base-1.20.3-py39he0bd621_0\n",
      "  packaging          anaconda/noarch::packaging-21.3-pyhd3eb1b0_0\n",
      "  pandas             anaconda/osx-64::pandas-1.4.2-py39he9d5cce_0\n",
      "  regex              anaconda/osx-64::regex-2022.3.15-py39hca72f7f_0\n",
      "  requests           anaconda/noarch::requests-2.27.1-pyhd3eb1b0_0\n",
      "  scipy              anaconda/osx-64::scipy-1.7.3-py39h8c7af03_0\n",
      "  statsmodels        anaconda/osx-64::statsmodels-0.12.2-py39h9ed2024_0\n",
      "  urllib3            anaconda/osx-64::urllib3-1.26.9-py39hecd8cb5_0\n",
      "\n",
      "The following packages will be UPDATED:\n",
      "\n",
      "  ca-certificates    pkgs/main::ca-certificates-2021.10.26~ --> anaconda::ca-certificates-2022.4.26-hecd8cb5_0\n",
      "  certifi            pkgs/main::certifi-2021.10.8-py39hecd~ --> anaconda::certifi-2021.10.8-py39hecd8cb5_2\n",
      "  openssl              pkgs/main::openssl-1.1.1l-h9ed2024_0 --> anaconda::openssl-1.1.1n-hca72f7f_0\n",
      "\n",
      "The following packages will be DOWNGRADED:\n",
      "\n",
      "  anaconda                                   2021.11-py39_0 --> custom-py39_1\n",
      "\n",
      "\n",
      "Preparing transaction: done\n",
      "Verifying transaction: failed\n",
      "\n",
      "RemoveError: 'requests' is a dependency of conda and cannot be removed from\n",
      "conda's operating environment.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# notice: installing seaborn might takes a few minutes\n",
    "!conda install -c anaconda seaborn -y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "\n",
    "bins = np.linspace(df.Principal.min(), df.Principal.max(), 10)\n",
    "g = sns.FacetGrid(df, col=\"Gender\", hue=\"loan_status\", palette=\"Set1\", col_wrap=2)\n",
    "g.map(plt.hist, 'Principal', bins=bins, ec=\"k\")\n",
    "\n",
    "g.axes[-1].legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAagAAADQCAYAAABStPXYAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/YYfK9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAZeElEQVR4nO3de5QU5bnv8e8PGB0UiRdmw8gIMxokYsBRZ0eNmo0kctje0K0hGreBdTghGrywovGSmKyT7Vleoksxx9vmRAMrOyKabJBNVmIQ4SCJt0FBQBIlOpoxIBc1yhGIyHP+6JpZIwxMz1AzXd3z+6xVq7veqn77eZl+ebreqq5XEYGZmVnW9Ch0AGZmZq1xgjIzs0xygjIzs0xygjIzs0xygjIzs0xygjIzs0xygkqZpP6SHpb0uqSlkp6RdF5KdY+UNC+NurqCpEWS6godhxVWKfUJSRWSnpP0kqRTO/F9NndW3cXECSpFkgTMARZHxOERcTxwIVBVoHh6FeJ9zZqUYJ/4MrAiIo6NiKfTiMl2zwkqXaOAv0fEA00FEfFmRPxvAEk9Jd0u6QVJL0v6VlI+Mjna+KWkP0r6RdKxkTQmKXsR+JemeiXtL+khSc8n3+bGJuUTJM2V9BSwYG8aI2m6pPslPZt8+x2ZvOdqSdNb7He/pHpJqyT9aDd1jU6+Ob8o6TFJffYmNisaJdMnJNUCPwbGSlomqffuPteSGiTdkuxXL+k4SU9I+rOkS5N9+khakLx2RVO8rbzvd1v8+7Tav0pWRHhJaQGuBO7aw/ZJwI3J832BeqAGGAn8jdy3yh7AM8ApQDnwF2AIIOBRYF7y+puBf02eHwi8CuwPTAAagYN3E8PTwLJWlq+0su904JHkvccCHwDDkxiXArXJfgcnjz2BRcCIZH0RUAf0AxYD+yfl1wE/LPTfy0vnLyXYJyYA9yTPd/u5BhqAy5LndwEvAwcAFcA7SXkvoG+LutYAStY3J4+jgWlJW3sA84AvFfrv2lWLh4A6kaR7yXWqv0fEP5L7sI2QdEGyy2fIdbS/A89HRGPyumVANbAZeCMiXkvK/4Nchyap6xxJ1yTr5cCg5Pn8iHi3tZgior3j5v8VESFpBbmOtSKJZVUS4zJgnKRJ5DpcJTCMXIdscmJS9vvkS/A+5P7DsW6mRPpEk7Y+13OTxxVAn4j4EPhQ0jZJBwL/D7hZ0peAHcBAoD+wrkUdo5PlpWS9D7l/n8UdjLmoOEGlaxVwftNKREyW1I/ct0LIfQu6IiKeaPkiSSOBbS2KPqHtv42A8yPiTzvVdQK5D37rL5KeJvdNbmfXRMSTrZQ3xbVjpxh3AL0k1QDXAP8YEe8lQ3/lrcQ6PyIu2kN7rDSVYp9o+X57+lzvse8AF5M7ojo+Ij6W1EDrfeeWiPj3PcRRsnwOKl1PAeWSLmtRtl+L508Al0kqA5B0pKT991DfH4FqSUck6y07whPAFS3G5Y/NJ8CIODUialtZ9tQR96Qvuc7/N0n9gX9uZZ9ngZMlfTaJdX9JR3bw/ay4lHKf2NvP9WeA9UlyOg0Y3Mo+TwD/vcW5rYGS/qEd71HUfASVomQo7FzgLknXAhvI/ed9XbLLT8kNU7yYdKINwLl7qG9rMnT2a0kfkRsrb/qmdxMwFXhZUg/gDeCslJvUpohYLuklcv9x/AX4fSv7bJA0AZgpad+k+EZy5wishJVyn0jhc/0L4L+S4fN6cn1o5/f4naSjgGeSvLsZ+Fdg/V6GXxSaTsiZmZlliof4zMwsk5ygzMwsk5ygzMwsk5ygzMwsk7o0QY0ZMyYAL166y9Ih7ideuuHSqi5NUBs3buzKtzMrSu4nZjke4jMzs0xygjIzs0xygjIzs0zyrY7MrOR9/PHHNDY2snXr1kKH0q2Vl5dTVVVFWVlZXvs7QZlZyWtsbOSAAw6gurqa5J521sUigk2bNtHY2EhNTU1er/EQn5mVvK1bt3LIIYc4ORWQJA455JB2HcU6QXWxwZWVSEplGVxZWejmmBUNJ6fCa+/fwEN8XeytdetoPLQqlbqq/tqYSj1mZlnkIygz63bSHMnIdzSjZ8+e1NbW8vnPf56vfvWrfPTRRwBs376diooKrr/++k/tP3LkSOrrcxMPV1dXM3z4cIYPH86wYcO48cYbPzVUtmrVKkaNGsXQoUMZMmQIN910E01TKU2fPp2Kigpqa2upra3lG9/4BgATJkygpqamufwnP/lJKv+2afIRlJl1O2mOZEB+oxm9e/dm2bJlAFx88cU88MADfOc732H+/PkceeSRPPbYY9xyyy27HQZbuHAh/fr1Y/PmzUyaNIlvfetbzJgxgy1btnDOOedw//33M3r0aD766CPOP/987rvvPiZPngzA1772Ne65555d6rz99tu54IILOt7wTuYjKDOzLnbqqaeyZs0aAGbOnMlVV13FoEGDeOaZZ9p8bZ8+fXjggQeYM2cO7777Lg8//DAnn3wyo0ePBmC//fbjnnvu4dZbb+3UNnQFJygzsy60fft2fvOb3zB8+HC2bt3Kk08+ydlnn81FF13EzJkz86qjb9++1NTU8Nprr7Fq1SqOP/74T20/4ogj2Lx5Mx988AEAs2bNah7K+9nPfta833e/+93m8hUrVqTXyJR4iM/MrAts2bKF2tpaIHcENXHiRObOnctpp51G7969Of/887npppuYOnUqPXv2bLO+pnNM+SjWIb68EpSkBuBD4BNge0TUSToYmAVUAw3AuIh4r3PCNDMrbi3PQTWZOXMmS5Ysobq6GoBNmzbx1FNPcfrpp++xrg8//JCGhgaOPPJIhg0bxuLFiz+1/fXXX6dPnz707ds3zSZ0ufYM8Z0WEbURUZesXw8siIghwIJk3czM8vDBBx/w9NNP89Zbb9HQ0EBDQwP33ntvm8N8mzdv5tvf/jbnnnsuBx10EBdffDFLlizhySefBHJHaldeeSXXXnttVzSjU+3NEN9YYGTyfAawCLhuL+MxM+t0gwYMSPV3hIMGDGj3a2bPns2oUaPYd999m8vGjh3Ltddey7Zt23bZ/7TTTiMi2LFjB+eddx4/+MEPgNyR2eOPP84VV1zB5MmT+eSTT7jkkku4/PLLO96gjFA+45iS3gDeIzfz4b9HxDRJ70fEgcl2Ae81re/02knAJIBBgwYd/+abb6YXfRGSlOoPddszDm1dLu+fzbufdK7Vq1dz1FFHFToMY7d/i1b7Sr5DfKdExHHAPwOTJX2p5cbI/S/Z6v+UETEtIuoioq6ioiLPtzPrXtxPzHaVV4KKiLeTx/XAbOALwDuSKgGSx/WdFaSZmXU/bSYoSftLOqDpOTAaWAnMBcYnu40HHu+sIM3MrPvJ5yKJ/sDs5PYbvYCHI+K3kl4AHpU0EXgTGNd5YZqZWXfTZoKKiNeBY1op3wR8uTOCMjMz862OzMwsk5ygzKzbObRqUKrTbRxaNajN91y3bh0XXnghRxxxBMcffzxnnHEGr776aptTZbT2e6bq6mo2btz4qbKdp9Wora3llVdeAeDVV1/ljDPOYMiQIRx33HGMGzfuU/fn69OnD0OHDm2ejmPRokWcddZZzXXPmTOHESNGcNRRRzF8+HDmzJnTvG3ChAkMHDiw+bdbGzdubL4zxt7yvfjyMLiykrfWrSt0GGaWkrVv/4UTfvjb1Op77t/G7HF7RHDeeecxfvx4HnnkEQCWL1/OO++8w4QJE/Y4VUZ7tHbPva1bt3LmmWdy5513cvbZZwOwaNEi+vXr13zrpZEjR3LHHXdQV1fXvL3J8uXLueaaa5g/fz41NTW88cYbnH766Rx++OGMGDECyM119dBDD3HZZZe1O+Y9cYLKg2fBNbO9sXDhQsrKyrj00kuby4455hgefPDBVqfKGDlyZIcSVGsefvhhTjrppObkBLmElK877riD733ve9TU1ABQU1PDDTfcwO23387Pf/5zAKZMmcJdd93FN7/5zVRibuIhPjOzTrZy5cpdpsQA8poqoz1aDtvV1tayZcuW3b53vlqLsa6ujlWrVjWvDxo0iFNOOaU5YaXFR1BmZiVid9NqdIUbbriBsWPHcuaZZ6ZWp4+gzMw62dFHH83SpUt3KR82bNgu5WlPlbG7985XazEuXbqUo48++lNlQ4YMoba2lkcffbTD77UzJygzs042atQotm3bxrRp05rLXn75ZYYOHdrpU2V8/etf5w9/+AO//vWvm8sWL17MypUr83r9Nddcwy233EJDQwMADQ0N3HzzzVx99dW77Pv973+fO+64I5W4wUN8ZtYNVQ48rM0r79pb355IYvbs2UyZMoXbbruN8vJyqqurmTp1aptTZUyfPv1Tl3U/++yzAIwYMYIePXLHGOPGjWPEiBHMmjWLJUuWNO9733338cUvfpF58+YxZcoUpkyZQllZGSNGjODuu+/Oq221tbXcdtttnH322Xz88ceUlZXx4x//uHl24JaOPvpojjvuOF588cW86m5LXtNtpKWuri7q6+u77P3SkvYUGZ5uo9vIe7qNloq1n2SZp9vIjs6YbsPMzKxLOUGZmVkmOUGZWbfg4fDCa+/fwAnKzEpeeXk5mzZtcpIqoIhg06ZNlJeX5/0aX8VnZiWvqqqKxsZGNmzYUOhQurXy8nKqqvK/SMwJqojtS+4KwzQMGjCAN9euTaUus6wpKytrvpecFQ8nqCK2DXwTWzMrWXmfg5LUU9JLkuYl6zWSnpO0RtIsSft0XphmZtbdtOciiauA1S3WbwPuiojPAu8BE9MMzMzMure8EpSkKuBM4KfJuoBRwC+TXWYA53ZCfGZm1k3lewQ1FbgW2JGsHwK8HxHbk/VGYGBrL5Q0SVK9pHpfQWPWOvcTs121maAknQWsj4gO3a89IqZFRF1E1FVUVHSkCrOS535itqt8ruI7GThH0hlAOdAXuBs4UFKv5CiqCni788I0M7Pups0jqIi4ISKqIqIauBB4KiIuBhYCFyS7jQce77Qozcys29mbWx1dB3xH0hpy56QeTCckMzOzdv5QNyIWAYuS568DX0g/JDMzM98s1szMMsoJyszMMskJyszMMskJyszMMskJyszMMskJyszMMskJyszMMskJyszMMskJyszMMskJyszMMskJyszMMskJyszMMskJyszMMskJyszMMskJyszMMskJyszMMskJyszMMskJyszMMqnNBCWpXNLzkpZLWiXpR0l5jaTnJK2RNEvSPp0frpmZdRf5HEFtA0ZFxDFALTBG0onAbcBdEfFZ4D1gYqdFaWZm3U6bCSpyNierZckSwCjgl0n5DODczgjQzMy6p7zOQUnqKWkZsB6YD/wZeD8itie7NAIDd/PaSZLqJdVv2LAhhZDNSo/7idmu8kpQEfFJRNQCVcAXgM/l+wYRMS0i6iKirqKiomNRmpU49xOzXbXrKr6IeB9YCJwEHCipV7KpCng73dDMzKw7y+cqvgpJBybPewOnA6vJJaoLkt3GA493UoxmZtYN9Wp7FyqBGZJ6kktoj0bEPEmvAI9I+l/AS8CDnRinmZl1M20mqIh4GTi2lfLXyZ2PMjMzS53vJGFmZpnkBGVmZpnkBGVmZpnkBGVmZplUsglqcGUlklJZzMys6+VzmXlRemvdOhoPrUqlrqq/NqZSj5mZ5a9kj6DMzKy4OUGZmVkmOUGZmVkmOUGZmVkmOUGZmVkmOUGZmVkmOUGZmVkmOUGZmVkmOUGZmVkmOUGZmVkmOUGZmVkmtZmgJB0maaGkVyStknRVUn6wpPmSXkseD+r8cM3MrLvI5whqO3B1RAwDTgQmSxoGXA8siIghwIJk3czMLBVtJqiIWBsRLybPPwRWAwOBscCMZLcZwLmdFKOZmXVD7ToHJakaOBZ4DugfEWuTTeuA/rt5zSRJ9ZLqN2zYsDexmpUs9xOzXeWdoCT1AX4FTImID1pui4gAorXXRcS0iKiLiLqKioq9CtasVLmfmO0qrwQlqYxccvpFRPxnUvyOpMpkeyWwvnNCNDOz7iifq/gEPAisjog7W2yaC4xPno8HHk8/POsq+8Iep71vzzK4srLQzTGzEpDPlO8nA5cAKyQtS8q+B9wKPCppIvAmMK5TIrQusQ1oPLQqlbqq/tqYSj1m1r21maAiYgmg3Wz+crrhZJN6lqX2n6567ZNeXT3LUqnHzCyL8jmC6vbik4854Ye/TaWu5/5tTKp1mZmVKt/qyMzMMskJyszMMskJyszMMskJyszMMskJyszMMskJyszMMskJyszMMskJyszMMskJyszMMqlk7ySR5u2JzMys65Vsgkr79kRmZta1PMRnZmaZ5ARlZmaZ5ARlZmaZVLLnoLqDVOep8txSljGDKyt5a926VOrq3aMnW3Z8kkpdgwYM4M21a1Opy/bMCaqI+UIQK2VvrVuX6izPnjG6+LQ5xCfpIUnrJa1sUXawpPmSXkseD+rcMM3MrLvJ5xzUdGDnr9fXAwsiYgiwIFk3A2BfQFIqy+DKykI3x8wKpM0hvohYLKl6p+KxwMjk+QxgEXBdmoFZ8doGHk4xs73W0av4+kdE01nCdUD/3e0oaZKkekn1GzZs6ODbmZW2UukngysrUzt6NtvriyQiIiTFHrZPA6YB1NXV7XY/s+6sVPpJ2hc2WPfW0SOodyRVAiSP69MLyczMrOMJai4wPnk+Hng8nXDMzMxy8rnMfCbwDDBUUqOkicCtwOmSXgO+kqybmZmlJp+r+C7azaYvpxyLmZlZs0zdi89XAJmZWZNM3erIVwCZmVmTTCUoKxzfeNbMssYJygDfeNbMsidT56DMzMyaOEGZmVkmOUGZmVkmOUGZmVkmOUFZpnluqc7n3x9aVvkqPss0zy3V+fz7Q8sqJyhLnX9TZWZpcIKy1Pk3VWaWBp+DMjOzTPIRlGVamsOFPXqWpXoif9CAAby5dm1q9ZWCVId3e+3joeJ2GFxZyVvr1qVSV1Y+205QlmlpDxemdTEA+IKA1qT99/JQcf5K8WIXD/GZmVkmZeoIKs3hATMzK26ZSlC++svMzJrsVYKSNAa4G+gJ/DQibk0lKrNOkPYReiFPvKd5QtzaJ82LbXr0KmPH9o9TqasUdThBSeoJ3AucDjQCL0iaGxGvpBWcWZrSPEKHwh6ll+IJ8WKxI6MX7pTi33FvLpL4ArAmIl6PiL8DjwBj0wnLzMy6O0VEx14oXQCMiYj/kaxfApwQEZfvtN8kYFKyOhT4U8fD/ZR+wMaU6sqCUmpPKbUFOt6ejRGR12GW+0ne3J5sS7WvdPpFEhExDZiWdr2S6iOiLu16C6WU2lNKbYGuaY/7SX7cnmxLuz17M8T3NnBYi/WqpMzMzGyv7U2CegEYIqlG0j7AhcDcdMIyM7PursNDfBGxXdLlwBPkLjN/KCJWpRZZ21IfDimwUmpPKbUFirs9xRx7a9yebEu1PR2+SMLMzKwz+V58ZmaWSU5QZmaWSZlPUJIOk7RQ0iuSVkm6Kik/WNJ8Sa8ljwcVOtZ8SCqX9Lyk5Ul7fpSU10h6TtIaSbOSC0+KhqSekl6SNC9ZL9r2SGqQtELSMkn1SVnmP2/uK9nnftI+mU9QwHbg6ogYBpwITJY0DLgeWBARQ4AFyXox2AaMiohjgFpgjKQTgduAuyLis8B7wMTChdghVwGrW6wXe3tOi4jaFr/pKIbPm/tK9rmftEdEFNUCPE7u/n9/AiqTskrgT4WOrQNt2Q94ETiB3K+veyXlJwFPFDq+drSjKvkwjgLmASry9jQA/XYqK7rPm/tKthb3k/YvxXAE1UxSNXAs8BzQPyKa5iReB/QvVFztlRzmLwPWA/OBPwPvR8T2ZJdGYGCBwuuIqcC1wI5k/RCKuz0B/E7S0uQWRFBknzf3lUyaivtJu2RqPqg9kdQH+BUwJSI+aHm7+4gISUVzvXxEfALUSjoQmA18rrARdZyks4D1EbFU0sgCh5OWUyLibUn/AMyX9MeWG7P+eXNfyR73k44pigQlqYxch/tFRPxnUvyOpMqIWCupktw3rKISEe9LWkju0P5ASb2Sb1PFdNuok4FzJJ0BlAN9yc0RVqztISLeTh7XS5pN7s79RfF5c1/JLPeTDsj8EJ9yX/8eBFZHxJ0tNs0FxifPx5Mbb888SRXJt0Ek9SZ3jmA1sBC4INmtaNoTETdERFVEVJO73dVTEXExRdoeSftLOqDpOTAaWEkRfN7cV7LL/aSDCn2iLY8TcaeQG+t8GViWLGeQG79dALwGPAkcXOhY82zPCOClpD0rgR8m5YcDzwNrgMeAfQsdawfaNhKYV8ztSeJeniyrgO8n5Zn/vLmvFMfifpL/4lsdmZlZJmV+iM/MzLonJygzM8skJygzM8skJygzM8skJygzM8skJygzM8skJygzM8skJ6gSIGlOcsPGVU03bZQ0UdKryXw6/0fSPUl5haRfSXohWU4ubPRmXcd9pbj4h7olQNLBEfFucjuYF4D/BvweOA74EHgKWB4Rl0t6GLgvIpZIGkTu9v5HFSx4sy7kvlJciuJmsdamKyWdlzw/DLgE+L8R8S6ApMeAI5PtXwGGtbjDdV9JfSJic1cGbFYg7itFxAmqyCW37v8KcFJEfCRpEfBHYHff9HoAJ0bE1i4J0Cwj3FeKj89BFb/PAO8lHe5z5Kb63h/4J0kHSeoFnN9i/98BVzStSKrtymDNCsh9pcg4QRW/3wK9JK0GbgWeJTenzM3k7pL8e3JTM/8t2f9KoE7Sy5JeAS7t8ojNCsN9pcj4IokS1TRWnnwrnA08FBGzCx2XWda4r2SXj6BK1/+UtIzcPDpvAHMKGo1ZdrmvZJSPoMzMLJN8BGVmZpnkBGVmZpnkBGVmZpnkBGVmZpnkBGVmZpn0/wH2yWB0APC77wAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "bins = np.linspace(df.age.min(), df.age.max(), 10)\n",
    "g = sns.FacetGrid(df, col=\"Gender\", hue=\"loan_status\", palette=\"Set1\", col_wrap=2)\n",
    "g.map(plt.hist, 'age', bins=bins, ec=\"k\")\n",
    "\n",
    "g.axes[-1].legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "# Pre-processing:  Feature selection/extraction\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "### Let's look at the day of the week people get the loan\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['dayofweek'] = df['effective_date'].dt.dayofweek\n",
    "bins = np.linspace(df.dayofweek.min(), df.dayofweek.max(), 10)\n",
    "g = sns.FacetGrid(df, col=\"Gender\", hue=\"loan_status\", palette=\"Set1\", col_wrap=2)\n",
    "g.map(plt.hist, 'dayofweek', bins=bins, ec=\"k\")\n",
    "g.axes[-1].legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "We see that people who get the loan at the end of the week don't pay it off, so let's use Feature binarization to set a threshold value less than day 4\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0.1</th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>loan_status</th>\n",
       "      <th>Principal</th>\n",
       "      <th>terms</th>\n",
       "      <th>effective_date</th>\n",
       "      <th>due_date</th>\n",
       "      <th>age</th>\n",
       "      <th>education</th>\n",
       "      <th>Gender</th>\n",
       "      <th>dayofweek</th>\n",
       "      <th>weekend</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>2016-09-08</td>\n",
       "      <td>2016-10-07</td>\n",
       "      <td>45</td>\n",
       "      <td>High School or Below</td>\n",
       "      <td>male</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>2016-09-08</td>\n",
       "      <td>2016-10-07</td>\n",
       "      <td>33</td>\n",
       "      <td>Bechalor</td>\n",
       "      <td>female</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>1000</td>\n",
       "      <td>15</td>\n",
       "      <td>2016-09-08</td>\n",
       "      <td>2016-09-22</td>\n",
       "      <td>27</td>\n",
       "      <td>college</td>\n",
       "      <td>male</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>2016-09-09</td>\n",
       "      <td>2016-10-08</td>\n",
       "      <td>28</td>\n",
       "      <td>college</td>\n",
       "      <td>female</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>2016-09-09</td>\n",
       "      <td>2016-10-08</td>\n",
       "      <td>29</td>\n",
       "      <td>college</td>\n",
       "      <td>male</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0.1  Unnamed: 0 loan_status  Principal  terms effective_date  \\\n",
       "0             0           0     PAIDOFF       1000     30     2016-09-08   \n",
       "1             2           2     PAIDOFF       1000     30     2016-09-08   \n",
       "2             3           3     PAIDOFF       1000     15     2016-09-08   \n",
       "3             4           4     PAIDOFF       1000     30     2016-09-09   \n",
       "4             6           6     PAIDOFF       1000     30     2016-09-09   \n",
       "\n",
       "    due_date  age             education  Gender  dayofweek  weekend  \n",
       "0 2016-10-07   45  High School or Below    male          3        0  \n",
       "1 2016-10-07   33              Bechalor  female          3        0  \n",
       "2 2016-09-22   27               college    male          3        0  \n",
       "3 2016-10-08   28               college  female          4        1  \n",
       "4 2016-10-08   29               college    male          4        1  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['weekend'] = df['dayofweek'].apply(lambda x: 1 if (x>3)  else 0)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "## Convert Categorical features to numerical values\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "Let's look at gender:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Gender  loan_status\n",
       "female  PAIDOFF        0.865385\n",
       "        COLLECTION     0.134615\n",
       "male    PAIDOFF        0.731293\n",
       "        COLLECTION     0.268707\n",
       "Name: loan_status, dtype: float64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby(['Gender'])['loan_status'].value_counts(normalize=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "86 % of female pay there loans while only 73 % of males pay there loan\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "Let's convert male to 0 and female to 1:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0.1</th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>loan_status</th>\n",
       "      <th>Principal</th>\n",
       "      <th>terms</th>\n",
       "      <th>effective_date</th>\n",
       "      <th>due_date</th>\n",
       "      <th>age</th>\n",
       "      <th>education</th>\n",
       "      <th>Gender</th>\n",
       "      <th>dayofweek</th>\n",
       "      <th>weekend</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>2016-09-08</td>\n",
       "      <td>2016-10-07</td>\n",
       "      <td>45</td>\n",
       "      <td>High School or Below</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>2016-09-08</td>\n",
       "      <td>2016-10-07</td>\n",
       "      <td>33</td>\n",
       "      <td>Bechalor</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>1000</td>\n",
       "      <td>15</td>\n",
       "      <td>2016-09-08</td>\n",
       "      <td>2016-09-22</td>\n",
       "      <td>27</td>\n",
       "      <td>college</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>2016-09-09</td>\n",
       "      <td>2016-10-08</td>\n",
       "      <td>28</td>\n",
       "      <td>college</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>2016-09-09</td>\n",
       "      <td>2016-10-08</td>\n",
       "      <td>29</td>\n",
       "      <td>college</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0.1  Unnamed: 0 loan_status  Principal  terms effective_date  \\\n",
       "0             0           0     PAIDOFF       1000     30     2016-09-08   \n",
       "1             2           2     PAIDOFF       1000     30     2016-09-08   \n",
       "2             3           3     PAIDOFF       1000     15     2016-09-08   \n",
       "3             4           4     PAIDOFF       1000     30     2016-09-09   \n",
       "4             6           6     PAIDOFF       1000     30     2016-09-09   \n",
       "\n",
       "    due_date  age             education  Gender  dayofweek  weekend  \n",
       "0 2016-10-07   45  High School or Below       0          3        0  \n",
       "1 2016-10-07   33              Bechalor       1          3        0  \n",
       "2 2016-09-22   27               college       0          3        0  \n",
       "3 2016-10-08   28               college       1          4        1  \n",
       "4 2016-10-08   29               college       0          4        1  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Gender'].replace(to_replace=['male','female'], value=[0,1],inplace=True)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "## One Hot Encoding\n",
    "\n",
    "#### How about education?\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "education             loan_status\n",
       "Bechalor              PAIDOFF        0.750000\n",
       "                      COLLECTION     0.250000\n",
       "High School or Below  PAIDOFF        0.741722\n",
       "                      COLLECTION     0.258278\n",
       "Master or Above       COLLECTION     0.500000\n",
       "                      PAIDOFF        0.500000\n",
       "college               PAIDOFF        0.765101\n",
       "                      COLLECTION     0.234899\n",
       "Name: loan_status, dtype: float64"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby(['education'])['loan_status'].value_counts(normalize=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "#### Features before One Hot Encoding\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Principal</th>\n",
       "      <th>terms</th>\n",
       "      <th>age</th>\n",
       "      <th>Gender</th>\n",
       "      <th>education</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>45</td>\n",
       "      <td>0</td>\n",
       "      <td>High School or Below</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "      <td>Bechalor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000</td>\n",
       "      <td>15</td>\n",
       "      <td>27</td>\n",
       "      <td>0</td>\n",
       "      <td>college</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>28</td>\n",
       "      <td>1</td>\n",
       "      <td>college</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>29</td>\n",
       "      <td>0</td>\n",
       "      <td>college</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Principal  terms  age  Gender             education\n",
       "0       1000     30   45       0  High School or Below\n",
       "1       1000     30   33       1              Bechalor\n",
       "2       1000     15   27       0               college\n",
       "3       1000     30   28       1               college\n",
       "4       1000     30   29       0               college"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[['Principal','terms','age','Gender','education']].head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "#### Use one hot encoding technique to conver categorical varables to binary variables and append them to the feature Data Frame\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Principal</th>\n",
       "      <th>terms</th>\n",
       "      <th>age</th>\n",
       "      <th>Gender</th>\n",
       "      <th>weekend</th>\n",
       "      <th>Bechalor</th>\n",
       "      <th>High School or Below</th>\n",
       "      <th>college</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>45</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000</td>\n",
       "      <td>15</td>\n",
       "      <td>27</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>28</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>29</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Principal  terms  age  Gender  weekend  Bechalor  High School or Below  \\\n",
       "0       1000     30   45       0        0         0                     1   \n",
       "1       1000     30   33       1        0         1                     0   \n",
       "2       1000     15   27       0        0         0                     0   \n",
       "3       1000     30   28       1        1         0                     0   \n",
       "4       1000     30   29       0        1         0                     0   \n",
       "\n",
       "   college  \n",
       "0        0  \n",
       "1        0  \n",
       "2        1  \n",
       "3        1  \n",
       "4        1  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Feature = df[['Principal','terms','age','Gender','weekend']]\n",
    "Feature = pd.concat([Feature,pd.get_dummies(df['education'])], axis=1)\n",
    "Feature.drop(['Master or Above'], axis = 1,inplace=True)\n",
    "Feature.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "### Feature Selection\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "Let's define feature sets, X:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Principal</th>\n",
       "      <th>terms</th>\n",
       "      <th>age</th>\n",
       "      <th>Gender</th>\n",
       "      <th>weekend</th>\n",
       "      <th>Bechalor</th>\n",
       "      <th>High School or Below</th>\n",
       "      <th>college</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>45</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000</td>\n",
       "      <td>15</td>\n",
       "      <td>27</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>28</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>29</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Principal  terms  age  Gender  weekend  Bechalor  High School or Below  \\\n",
       "0       1000     30   45       0        0         0                     1   \n",
       "1       1000     30   33       1        0         1                     0   \n",
       "2       1000     15   27       0        0         0                     0   \n",
       "3       1000     30   28       1        1         0                     0   \n",
       "4       1000     30   29       0        1         0                     0   \n",
       "\n",
       "   college  \n",
       "0        0  \n",
       "1        0  \n",
       "2        1  \n",
       "3        1  \n",
       "4        1  "
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = Feature\n",
    "X[0:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "What are our lables?\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['PAIDOFF', 'PAIDOFF', 'PAIDOFF', 'PAIDOFF', 'PAIDOFF'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y = df['loan_status'].values\n",
    "y[0:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "## Normalize Data\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "Data Standardization give data zero mean and unit variance (technically should be done after train test split)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.51578458,  0.92071769,  2.33152555, -0.42056004, -1.20577805,\n",
       "        -0.38170062,  1.13639374, -0.86968108],\n",
       "       [ 0.51578458,  0.92071769,  0.34170148,  2.37778177, -1.20577805,\n",
       "         2.61985426, -0.87997669, -0.86968108],\n",
       "       [ 0.51578458, -0.95911111, -0.65321055, -0.42056004, -1.20577805,\n",
       "        -0.38170062, -0.87997669,  1.14984679],\n",
       "       [ 0.51578458,  0.92071769, -0.48739188,  2.37778177,  0.82934003,\n",
       "        -0.38170062, -0.87997669,  1.14984679],\n",
       "       [ 0.51578458,  0.92071769, -0.3215732 , -0.42056004,  0.82934003,\n",
       "        -0.38170062, -0.87997669,  1.14984679]])"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X= preprocessing.StandardScaler().fit(X).transform(X)\n",
    "X[0:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "# Classification\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "Now, it is your turn, use the training set to build an accurate model. Then use the test set to report the accuracy of the model\n",
    "You should use the following algorithm:\n",
    "\n",
    "*   K Nearest Neighbor(KNN)\n",
    "*   Decision Tree\n",
    "*   Support Vector Machine\n",
    "*   Logistic Regression\n",
    "\n",
    "\\__ Notice:\\__\n",
    "\n",
    "*   You can go above and change the pre-processing, feature selection, feature-extraction, and so on, to make a better model.\n",
    "*   You should use either scikit-learn, Scipy or Numpy libraries for developing the classification algorithms.\n",
    "*   You should include the code of the algorithm in the following cells.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# K Nearest Neighbor(KNN)\n",
    "\n",
    "Notice: You should find the best k to build the model with the best accuracy.\\\n",
    "**warning:** You should not use the **loan_test.csv** for finding the best k, however, you can split your train_loan.csv into train and test to find the best **k**.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The best K value is: 7\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn import metrics\n",
    "\n",
    "#Train/Test splitting\n",
    "x_train, x_test, y_train, y_test = train_test_split(X,y,test_size=0.2, random_state=4)\n",
    "\n",
    "#Finding the best value of K\n",
    "K = list(range(1,10))\n",
    "accuracy = list()\n",
    "\n",
    "for k in K:\n",
    "    neigh = KNeighborsClassifier(n_neighbors=k).fit(x_train,y_train) #Training the KNN model\n",
    "    y_pred = neigh.predict(x_test) #Predicting labels\n",
    "    Test_acc = metrics.accuracy_score(y_test, y_pred) #Evaluating model accuracy\n",
    "    accuracy.append(Test_acc)\n",
    "\n",
    "max_accuarcy = max(accuracy)\n",
    "max_index = accuracy.index(max_accuarcy)\n",
    "best_K = K[max_index]\n",
    "print(\"The best K value is:\", best_K)\n",
    "\n",
    "#Training the KNN model with the best value of K\n",
    "K = best_K\n",
    "KNN_model = KNeighborsClassifier(n_neighbors=best_K).fit(X,y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Decision Tree\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "import sklearn.tree as tree\n",
    "from sklearn import metrics\n",
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "depth = 4\n",
    "Tree = DecisionTreeClassifier(criterion=\"entropy\", max_depth = 4).fit(X,y)\n",
    "tree.plot_tree(Tree)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Support Vector Machine\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The best kernel function is: linear\n"
     ]
    }
   ],
   "source": [
    "from sklearn import svm\n",
    "\n",
    "#Train/Test splitting to choose the best kernel function\n",
    "x_train, x_test, y_train, y_test = train_test_split(X,y,test_size=0.2, random_state=4)\n",
    "\n",
    "#Choosing the best kernel function\n",
    "functions = ['linear','poly','rbf','sigmoid']\n",
    "accuracy = list()\n",
    "\n",
    "for function in functions:\n",
    "    svm_model = svm.SVC(kernel=function)\n",
    "    svm_model.fit(x_train, y_train)\n",
    "    y_pred = svm_model.predict(x_test)\n",
    "    acc = metrics.accuracy_score(y_test, y_pred)\n",
    "    accuracy.append(acc)\n",
    "\n",
    "max_accuarcy = max(accuracy)\n",
    "max_index = accuracy.index(max_accuarcy)\n",
    "best_kernel = functions[max_index]\n",
    "print(\"The best kernel function is:\", best_kernel)\n",
    "\n",
    "#Training SVM model with the best kernel function\n",
    "svm_model = svm.SVC(kernel=best_kernel).fit(X, y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Logistic Regression\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The best solver is: newton-cg\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "#Train/Test splitting to choose the best solver\n",
    "x_train, x_test, y_train, y_test = train_test_split(X,y,test_size=0.2, random_state=4)\n",
    "\n",
    "#Choosing the best kernel function\n",
    "solvers = [\"newton-cg\", \"lbfgs\", \"liblinear\", \"sag\", \"saga\"]\n",
    "accuracy = list()\n",
    "\n",
    "for function in solvers:\n",
    "    LR = LogisticRegression(C=0.01,solver=function).fit(x_train,y_train)\n",
    "    y_pred = LR.predict(x_test)\n",
    "    acc = metrics.accuracy_score(y_test, y_pred)\n",
    "    accuracy.append(acc)\n",
    "\n",
    "max_accuarcy = max(accuracy)\n",
    "max_index = accuracy.index(max_accuarcy)\n",
    "best_solver = solvers[max_index]\n",
    "print(\"The best solver is:\", best_solver)\n",
    "\n",
    "#Training LR model with the best solver\n",
    "LR = LogisticRegression(C=0.01,solver=best_solver).fit(X,y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Model Evaluation using Test set\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import jaccard_score\n",
    "from sklearn.metrics import f1_score\n",
    "from sklearn.metrics import log_loss\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, download and load the test set:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('loan_test.csv', <http.client.HTTPMessage at 0x120c57160>)"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import urllib.request\n",
    "url = 'https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/ML0101ENv3/labs/loan_test.csv'\n",
    "filename = 'loan_test.csv'\n",
    "urllib.request.urlretrieve(url, filename)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "### Load Test set for evaluation\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0.1</th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>loan_status</th>\n",
       "      <th>Principal</th>\n",
       "      <th>terms</th>\n",
       "      <th>effective_date</th>\n",
       "      <th>due_date</th>\n",
       "      <th>age</th>\n",
       "      <th>education</th>\n",
       "      <th>Gender</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>9/8/2016</td>\n",
       "      <td>10/7/2016</td>\n",
       "      <td>50</td>\n",
       "      <td>Bechalor</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>300</td>\n",
       "      <td>7</td>\n",
       "      <td>9/9/2016</td>\n",
       "      <td>9/15/2016</td>\n",
       "      <td>35</td>\n",
       "      <td>Master or Above</td>\n",
       "      <td>male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>21</td>\n",
       "      <td>21</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>9/10/2016</td>\n",
       "      <td>10/9/2016</td>\n",
       "      <td>43</td>\n",
       "      <td>High School or Below</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>24</td>\n",
       "      <td>24</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>9/10/2016</td>\n",
       "      <td>10/9/2016</td>\n",
       "      <td>26</td>\n",
       "      <td>college</td>\n",
       "      <td>male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>35</td>\n",
       "      <td>35</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>800</td>\n",
       "      <td>15</td>\n",
       "      <td>9/11/2016</td>\n",
       "      <td>9/25/2016</td>\n",
       "      <td>29</td>\n",
       "      <td>Bechalor</td>\n",
       "      <td>male</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0.1  Unnamed: 0 loan_status  Principal  terms effective_date  \\\n",
       "0             1           1     PAIDOFF       1000     30       9/8/2016   \n",
       "1             5           5     PAIDOFF        300      7       9/9/2016   \n",
       "2            21          21     PAIDOFF       1000     30      9/10/2016   \n",
       "3            24          24     PAIDOFF       1000     30      9/10/2016   \n",
       "4            35          35     PAIDOFF        800     15      9/11/2016   \n",
       "\n",
       "    due_date  age             education  Gender  \n",
       "0  10/7/2016   50              Bechalor  female  \n",
       "1  9/15/2016   35       Master or Above    male  \n",
       "2  10/9/2016   43  High School or Below  female  \n",
       "3  10/9/2016   26               college    male  \n",
       "4  9/25/2016   29              Bechalor    male  "
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_df = pd.read_csv('loan_test.csv')\n",
    "test_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Pre-processing\n",
    "test_df['due_date'] = pd.to_datetime(test_df['due_date'])\n",
    "test_df['effective_date'] = pd.to_datetime(test_df['effective_date'])\n",
    "test_df['dayofweek'] = test_df['effective_date'].dt.dayofweek\n",
    "test_df['weekend'] = test_df['dayofweek'].apply(lambda x: 1 if (x>3)  else 0)\n",
    "test_df.groupby(['Gender'])['loan_status'].value_counts(normalize=True)\n",
    "test_df['Gender'].replace(to_replace=['male','female'], value=[0,1],inplace=True)\n",
    "test_df.groupby(['education'])['loan_status'].value_counts(normalize=True)\n",
    "\n",
    "#Feature selection/extraction\n",
    "Feature = test_df[['Principal','terms','age','Gender','weekend']]\n",
    "Feature = pd.concat([Feature,pd.get_dummies(test_df['education'])], axis=1)\n",
    "Feature.drop(['Master or Above'], axis = 1,inplace=True)\n",
    "X = Feature\n",
    "X= preprocessing.StandardScaler().fit(X).transform(X)\n",
    "y = test_df['loan_status'].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Algorithm</th>\n",
       "      <th>Jaccard</th>\n",
       "      <th>F1-score</th>\n",
       "      <th>LogLoss</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>KNN</td>\n",
       "      <td>0.686275</td>\n",
       "      <td>0.673636</td>\n",
       "      <td>NA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Decision Tree</td>\n",
       "      <td>0.764706</td>\n",
       "      <td>0.728395</td>\n",
       "      <td>NA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>SVM</td>\n",
       "      <td>0.740741</td>\n",
       "      <td>0.630418</td>\n",
       "      <td>NA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Logistic Regression</td>\n",
       "      <td>0.740741</td>\n",
       "      <td>0.630418</td>\n",
       "      <td>0.515361</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Algorithm   Jaccard  F1-score   LogLoss\n",
       "0                  KNN  0.686275  0.673636        NA\n",
       "1        Decision Tree  0.764706  0.728395        NA\n",
       "2                  SVM  0.740741  0.630418        NA\n",
       "3  Logistic Regression  0.740741  0.630418  0.515361"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "report = pd.DataFrame()\n",
    "\n",
    "report['Algorithm'] = ['KNN','Decision Tree','SVM','Logistic Regression']\n",
    "\n",
    "#Evaluation metrics for KNN\n",
    "y_pred = neigh.predict(X)\n",
    "jaccard_knn = jaccard_score(y, y_pred, pos_label='PAIDOFF')\n",
    "f1_knn = f1_score(y, y_pred, average='weighted')\n",
    "logloss_knn = 'NA'\n",
    "\n",
    "#Evaluation metrics for Decision Tree\n",
    "y_pred = Tree.predict(X)\n",
    "jaccard_DT = jaccard_score(y, y_pred, pos_label='PAIDOFF')\n",
    "f1_DT = f1_score(y, y_pred, average='weighted')\n",
    "logloss_DT = 'NA'\n",
    "\n",
    "#Evaluation metrics for SVM\n",
    "y_pred = svm_model.predict(X)\n",
    "jaccard_SVM = jaccard_score(y, y_pred, pos_label='PAIDOFF')\n",
    "f1_SVM = f1_score(y, y_pred, average='weighted')\n",
    "logloss_SVM = 'NA'\n",
    "\n",
    "#Evaluation metrics for Logistic Regression\n",
    "y_pred = LR.predict(X)\n",
    "y_prob = LR.predict_proba(X)\n",
    "jaccard_LR = jaccard_score(y, y_pred, pos_label='PAIDOFF')\n",
    "f1_LR = f1_score(y, y_pred, average='weighted')\n",
    "logloss_LR = log_loss(y, y_prob)\n",
    "\n",
    "report['Jaccard'] = [jaccard_knn, jaccard_DT, jaccard_SVM, jaccard_LR]\n",
    "report['F1-score'] = [f1_knn, f1_DT, f1_SVM, f1_LR]\n",
    "report['LogLoss'] = [logloss_knn, logloss_DT, logloss_SVM, logloss_LR]\n",
    "report"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Report\n",
    "\n",
    "You should be able to report the accuracy of the built model using different evaluation metrics:\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "| Algorithm          | Jaccard | F1-score | LogLoss |\n",
    "| ------------------ | ------- | -------- | ------- |\n",
    "| KNN                | ?       | ?        | NA      |\n",
    "| Decision Tree      | ?       | ?        | NA      |\n",
    "| SVM                | ?       | ?        | NA      |\n",
    "| LogisticRegression | ?       | ?        | ?       |\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "<h2>Want to learn more?</h2>\n",
    "\n",
    "IBM SPSS Modeler is a comprehensive analytics platform that has many machine learning algorithms. It has been designed to bring predictive intelligence to decisions made by individuals, by groups, by systems â€“ by your enterprise as a whole. A free trial is available through this course, available here: <a href=\"http://cocl.us/ML0101EN-SPSSModeler?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkML0101ENSkillsNetwork20718538-2022-01-01\">SPSS Modeler</a>\n",
    "\n",
    "Also, you can use Watson Studio to run these notebooks faster with bigger datasets. Watson Studio is IBM's leading cloud solution for data scientists, built by data scientists. With Jupyter notebooks, RStudio, Apache Spark and popular libraries pre-packaged in the cloud, Watson Studio enables data scientists to collaborate on their projects without having to install anything. Join the fast-growing community of Watson Studio users today with a free account at <a href=\"https://cocl.us/ML0101EN_DSX?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkML0101ENSkillsNetwork20718538-2022-01-01\">Watson Studio</a>\n",
    "\n",
    "<h3>Thanks for completing this lesson!</h3>\n",
    "\n",
    "<h4>Author:  <a href=\"https://ca.linkedin.com/in/saeedaghabozorgi?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkML0101ENSkillsNetwork20718538-2022-01-01?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkML0101ENSkillsNetwork20718538-2022-01-01\">Saeed Aghabozorgi</a></h4>\n",
    "<p><a href=\"https://ca.linkedin.com/in/saeedaghabozorgi\">Saeed Aghabozorgi</a>, PhD is a Data Scientist in IBM with a track record of developing enterprise level applications that substantially increases clientsâ€™ ability to turn data into actionable knowledge. He is a researcher in data mining field and expert in developing advanced analytic methods like machine learning and statistical modelling on large datasets.</p>\n",
    "\n",
    "<hr>\n",
    "\n",
    "## Change Log\n",
    "\n",
    "| Date (YYYY-MM-DD) | Version | Changed By    | Change Description                                                             |\n",
    "| ----------------- | ------- | ------------- | ------------------------------------------------------------------------------ |\n",
    "| 2020-10-27        | 2.1     | Lakshmi Holla | Made changes in import statement due to updates in version of  sklearn library |\n",
    "| 2020-08-27        | 2.0     | Malika Singla | Added lab to GitLab                                                            |\n",
    "\n",
    "<hr>\n",
    "\n",
    "## <h3 align=\"center\"> Â© IBM Corporation 2020. All rights reserved. <h3/>\n",
    "\n",
    "<p>\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
